library ieee;
use ieee.std_logic_1164.all;
library work;
use work.npath_package.all;

entity fir_test is 
generic ( 
	n : natural := n_phases;
	width : natural := n_bits;
	width_address : natural := size_coefficient;
	clk_period : time := clk_period_smp
);
port (
	address : in std_logic_vector(width_address-1 downto 0) := (others => '0'); 
	vin : in std_logic_vector(width-1 downto 0) := (others => '0');
	vout : out std_logic_vector(width-1 downto 0) := (others => '0');
	vout_t, vout_s  : out bits_array_t(n - 1 downto 0) := (others => (others => '0'))
);
end fir_test; 

architecture behavior of fir_test is

signal phase_vector : std_logic_vector(n-1 downto 0)  := (others => '0');
signal clk : std_logic;
signal q_preg, q_firb :  bits_array_t(0 to n-1) := (others => (others => '0'));

component clock_generator is
	generic (
		clk_period : time := 10ns
	);

	port (
		clk : out std_logic
	);
end component;

component fir_basic is 
	generic ( 
		n	: natural  := 4;
		width	: natural  := 8
	);
	port (
		clk  	: in  std_logic;
		vin	: in  std_logic_vector(width-1 downto 0)  := (others => '0'); 
		vout	: out std_logic_vector(width-1 downto 0)  := (others => '0');
		vout_t, vout_s  : out bits_array_t(n - 1 downto 0) := (others => (others => '0'))
	);
end component;

component  fir_small is 
	generic ( 
		width_address	: natural  := 2;
		width	: natural  := 8
	);
	port (
		clk  	: in  std_logic;
		address : in std_logic_vector(width_address-1 downto 0);
		vin	: in  std_logic_vector(width-1 downto 0); 
		vout	: out std_logic_vector(width-1 downto 0)
	);
end component;


begin

clock: clock_generator generic map ( clk_period => clk_period ) port map ( clk => clk );
fir_one: fir_basic generic map ( n => n, width => width ) port map ( clk => clk, vin => vin, vout => vout, vout_t => vout_t, vout_s => vout_s);


end behavior;